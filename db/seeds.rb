# This file should contain all the record creation needed to seed the database with its default values.
# The data can then be loaded with the rake db:seed (or created alongside the db with db:setup).
#
# Examples:
#
#   cities = City.create([{ :name => 'Chicago' }, { :name => 'Copenhagen' }])
#   Mayor.create(:name => 'Daley', :city => cities.first)
Post.delete_all

post = Post.create :title => 'What is the best CSS Framework and are they worth the effort?', :body => %q{Reading on another forum I've came across the world of CSS Frameworks. The one I've been specifically looking at is BluePrint. I was wondering if anyone else had come across CSS frameworks, suggest which is the best and if they are worth the effort?}

Comment.create :body => %q{<p>CSS 'frameworks' are completely missing the point.</p><p>CSS is not like JavaScript, where you can include a base library/framework and then call functions and objects from it to do higher-level work. All a CSS framework can give you is declarative rules: some default browser-rule-reset stuff, some class styles to be forced to author your page to, and layout rules using 'float' and 'clear'. You can write that in a few lines of CSS yourself rather than pulling in the bloat of a hundred framework rules.</p><p>The 'grid layout' stuff in particular goes back to the bad old days of mixing your presentation into your markup. 'div class="span-24"' is no better than a table, you'll have to go back in there and change the markup to affect the layout. And all the frameworks I've seen are based around fixed-pixel floated boxes, making it impossible to create a liquid layout accessible on a wide range of window sizes.</p><p>It's backwards authoring, of use only for someone too scared to write a CSS rule.}, :post => post

Comment.create :body => %q{<p>bobince got it right.</p><blockquote>"CSS 'frameworks' are completely missing the point."</blockquote><p>http://unobtrusivecss.com/ - takes piss out of CSS Frameworks.</p>}, :post => post

Comment.create :body => %q{<p>So, nobody's responded to this question yet (although I've seen a few upvotes), so I am going to at least attempt to tackle the second question in this prompt.</p><p>CSS Frameworks are great; like any other framework, they reduce development time and let you get working immediately on site-specific design and CSS. They think about hard decisions so you don't have to.</p><p>Unfortunately, there are two downsides to using a framework (in general):</p><p>The framework dictates the overall structure and mechanics of your CSS code. Now, I'm not talking about a CSS reset (these are useful in their own right, but they are not true frameworks); I'm talking about an honest to good framework, that has already made the decisions about what semantic tags you are going to be using in your document, etc. As such, you are made dependent on the framework, and when there is a bug in the framework, you will most commonly have to fix it yourself.</p><p>Frameworks are not an excuse for being oblivious to cross-browser/advanced CSS issues. You will invariably run into them, just as you would working with a PHP or JavaScript framework. And you need to know how to deal with them. There is a common saying that you should write your own framework first, before using someone else's.</p><p>Taking a quick peek at Blueprint, I would not really call it a framework; maybe a reset with a few extra goodies on top.</p>}, :post => post

post = Post.create :title => 'HTML5/CSS3 Guides or tutorials', :body => %q{Are there any highly recommended resources for getting started with HTML5 and CSS3 for designing web applications?<br />Seems to be the wave of the future..Lets hear everyones thoughts}

Comment.create :body => %q{http://net.tutsplus.com/tutorials/html-css-techniques/html-5-and-css-3-the-techniques-youll-soon-be-using/<br />http://www.w3schools.com/html5/html5_reference.asp<br />http://www.w3schools.com/css3/css3_reference.asp}, :post => post

Comment.create :body => %q{<p>I saw this the other day and it is super awesome<br />http://html5boilerplate.com/</p><blockquote>HTML5 Boilerplate is the professional badass's base HTML/CSS/JS template for a fast, robust and future-proof site.<br />After more than two years in iterative development, you get the best of the best practices baked in: cross-browser normalization, performance optimizations, even optional features like cross-domain Ajax and Flash. A starter apache .htaccess config file hooks you the eff up with caching rules and preps your site to serve HTML5 video, use @font-face, and get your gzip zipple on.<br />Boilerplate is not a framework, nor does it prescribe any philosophy of development, it's just got some tricks to get your project off the ground quickly and right-footed.</blockquote>}, :post => post

post = Post.create :title => 'Reverse proxy', :body => %q{How does reverse proxy server work? Is it used to secure the main server? Is it used as a firewall? What are the reasons for using a proxy server? Could someone give a real world example?}

Comment.create :body => %q{<p>Typically a normal proxy server looks at requests going from an internal network out to the internet and caches them so that if another client requests the same page, the proxy can give it to them much quicker than a brand new request to a remote server.</p><p>A reverse proxy works in the opposite way.</p><p>Generally a reverse proxy will be installed in front of a web server, so that the second time a client requests a page from that server, the proxy will give it back to the remote client without bothering the web server at all.</p><p>In many cases the reverse proxy and the web server are the same machine. This is often done because the work the reverse proxy does is much, much simpler than going through a complete web server transaction.</p><p>Apache, lighthttpd and many other web servers can also function as reverse proxies.</p><p>Check Wikipedia for more info.</p>}, :post => post

Comment.create :body => %q{I could not give a more complete answer then what's available here:<br />http://en.wikipedia.org/wiki/Reverse_proxy}, :post => post
